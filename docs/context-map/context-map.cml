/* Context Map written with 'ContextMapper DSL' */
ContextMap InsuranceContextMap {
	type = SYSTEM_LANDSCAPE
	state = TO_BE
	
	/* Add bounded contexts to this context map: */
	contains AutoatendimentoBoundedContext
	contains PagamentoBoundedContext
	contains AcompanhamentoPedidoBoundedContext
	contains GerenciamentoCardapioBoundedContext
	contains GerenciamentoClientesBoundedContext
	contains PainelAdministrativoBoundedContext
	
	/* Define the context relationships: */ 

	PagamentoBoundedContext <- AutoatendimentoBoundedContext
	
	AutoatendimentoBoundedContext <- AcompanhamentoPedidoBoundedContext
	
	AcompanhamentoPedidoBoundedContext -> GerenciamentoCardapioBoundedContext
	
	GerenciamentoClientesBoundedContext <-> GerenciamentoCardapioBoundedContext

	GerenciamentoCardapioBoundedContext <- AutoatendimentoBoundedContext

	PainelAdministrativoBoundedContext <- AcompanhamentoPedidoBoundedContext

	GerenciamentoCardapioBoundedContext <-> PainelAdministrativoBoundedContext	
}

/* Bounded Context Definitions */
BoundedContext AutoatendimentoBoundedContext implements GerenciamentoClientesDomain

BoundedContext PagamentoBoundedContext implements GerenciamentoClientesDomain

BoundedContext AcompanhamentoPedidoBoundedContext implements AutoatendimentoDomain

BoundedContext GerenciamentoCardapioBoundedContext implements GerenciamentoCardapioDomain

BoundedContext GerenciamentoClientesBoundedContext implements PagamentoDomain

BoundedContext PainelAdministrativoBoundedContext implements AcompanhamentoPedidosDomain

/* Domain & Subdomain Definitions */
Domain RMSDomain {
  Subdomain AutoatendimentoDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Os clientes são apresentados a uma interface de seleção na qual podem optar por se identificarem via CPF, se cadastrarem com nome, e-mail ou não se identificar, podendo montar o combo na seguinte sequência, sendo todas elas opcionais: 1. Lanche, 2. Acompanhamento, 3. Bebida. Em cada etapa é exibido o nome, descrição e preço de cada produto."
	}
	Subdomain PagamentoDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "O sistema deverá possuir uma opção de pagamento integrada para MVP. A forma de pagamento oferecida será via QRCode do Mercado Pago."
	}
  Subdomain AcompanhamentoPedidosDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Uma vez que o pedido é confirmado e pago, ele é enviado para a cozinha para ser preparado. Simultaneamente deve aparecer em um monitor para o cliente acompanhar o progresso do seu pedido com as seguintes etapas: Recebido, Em preparação, Pronto, Finalizado."
	}
	Subdomain GerenciamentoCardapioDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "Os produtos dispostos para escolha do cliente serão gerenciados pelo estabelecimento, definindo nome, categoria, preço, descrição e imagens. Para esse sistema teremos categorias fixas."
	}
  Subdomain GerenciamentoClientesDomain {
		type = GENERIC_SUBDOMAIN
		domainVisionStatement = "Com a identificação dos clientes o estabelecimento pode trabalhar em campanhas promocionais."
	}
  Subdomain PainelAdministrativoDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "Deve ser possível acompanhar os pedidos em andamento e tempo de espera de cada pedido. As informações dispostas no sistema de pedidos precisarão ser gerenciadas pelo estabelecimento através de um painel administrativo."
	}
}